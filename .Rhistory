library(ISLR)
install.packages("ISLR")
library(ISLR)
data("Default")
Default$income
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(caret)
library(ISLR)
library(shiny)
trainIn = createDataPartition(Default$default, p = 0.6, list = FALSE)
runApp(display.mode = TRUE)
?runApp
runApp(display.mode = showcase)
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = showcase)
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = showcase)
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
train = Default[trainIn,]
test = Default[-trainIn,]
model = train(default~., method = "glm",data = finalTrain)
finalTrain = train
model = train(default~., method = "glm",data = finalTrain)
predictions = predict(object = model, finalTest)
finalTest = test
predictions = predict(object = model, finalTest)
confusionMatrix(predictions,finalTest$default)
x = confusionMatrix(predictions,finalTest$default)
x$table
runApp(display.mode = "showcase")
unlist(x)
x$overall
x$byClass
typeof(x$byClass)
as.character(x$byClass)
typeof(x$table)
class(x$table)
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
?tableOutput
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
?fixedRow
runApp(display.mode = "showcase")
?fluidRow
runApp(display.mode = "showcase")
?fixedRow
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = c("income","student","balance")
paste(test,sep = ",")
paste(1:12)
re = paste(test,sep = ",")
res
re
paste(test,sep = ",", collapse = "")
paste(test,sep = ",", collapse = " ")
paste(test,sep = ",", collapse = ", ")
paste(test,sep = "", collapse = ", ")
runApp()
runApp()
runApp()
setwd("G:/John Hopkins Data Science Specialization Coursera/Developing Data Products/Course Project/devproject")
install.packages("digest")
getwd()
setwd("G:/John Hopkins Data Science Specialization Coursera/Developing Data Products/Course Project/devproject")
library(slidify)
publish("alexgyl","Dev-Data-Products-Course-Project")
publish(user = "alexgyl",host = "Dev-Data-Products-Course-Project")
publish(user = "alexgyl",repo = "Dev-Data-Products-Course-Project")
publish(user = "alexgyl",repo = "Dev-Data-Products-Course-Project", host = "github")
publish(user = "alexgyl",repo = "Dev-Data-Products-Course-Project", host = "github")
setwd("G:/John Hopkins Data Science Specialization Coursera/Developing Data Products/Course Project/devproject")
getwd
getwd()
setwd("G:/John Hopkins Data Science Specialization Coursera/Developing Data Products/Course Project")
runApp9
runApp()
library(shiny)
runApp()
setwd("G:/John Hopkins Data Science Specialization Coursera/Developing Data Products/Course Project/devproject")
author("courseproj")
